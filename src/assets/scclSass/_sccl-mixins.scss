@mixin border-radius($values...){
  @if length($values) == 1  {
  	-moz-border-radius: $values;
  	-webkit--radius: $values;
  	border-radius: $values;
  	}@else {
  		-moz-border-radius: nth($values, 1) nth($values, 2) nth($values, 3) nth($values, 4);
  		-webkit--radius: nth($values, 1) nth($values, 2) nth($values, 3) nth($values, 4);
  		border-radius: nth($values, 1) nth($values, 2) nth($values, 3) nth($values, 4);	
  	}
}

@mixin display-flex($justify-content, $align-items) {
	display: -webkit-box;  /* OLD - iOS 6-, Safari 3.1-6, BB7 */
  	display: -ms-flexbox;  /* TWEENER - IE 10 */
  	display: -webkit-flex; /* NEW - Safari 6.1+. iOS 7.1+, BB10 */
  	display: flex;         /* NEW, Spec - Firefox, Chrome, Opera */
  	justify-content: $justify-content;
  	align-items: $align-items;	
}

@mixin flex-width($value) {
	-webkit-box-flex: $value;   /* OLD - iOS 6-, Safari 3.1-6 */
  	-webkit-flex: $value;       /* Safari 6.1+. iOS 7.1+, BB10 */
  	-ms-flex: $value;           /* IE 10 */
  	flex: $value;               /* NEW, Spec - Firefox, Chrome, Opera */	
}

@mixin sccl-transform($transforms) {
   -moz-transform: $transforms;
   -o-transform: $transforms;
   -ms-transform: $transforms;
   -webkit-transform: $transforms;
   transform: $transforms;
}
@mixin sccl-transition($transition...) {
    -moz-transition:    $transition;
	-o-transition:      $transition;
	-ms-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
}

@mixin sccl-transition-delay($t, $tFunc, $prop...) {
	-webkit-transition-property: $prop;
	-webkit-transition-duration:$t;
	-webkit-transition-timing-function: $tFunc;
	transition-property: $prop;
	transition-duration:$t;
	transition-timing-function: $tFunc;
}

@mixin sccl-translate ($x, $y) {
   @include sccl-transform(translate($x, $y));
}

@mixin sccl-preloader-small($theme) {
	height: 30px;
	line-height: 30px;
	width: 10%;
	margin: auto;
	> div.preloader-wrapper {
		&.small {
			width: 16px;
			height: 16px;
			border-color: yellow;
			}
		> .spinner-layer {
			border-color: map-get($theme, 'sccl-dropdown-menu-text-darken');
			}
	}
}

<<<<<<< HEAD
@mixin sccl-caret() {
	font-family: FontAwesome;
	position: absolute;
	@content
=======
@mixin sccl-caret($x-pos, $y-pos, $content, $color, $size){
	content: $content;
	font-family: FontAwesome;
	position: absolute;
	color: $color;
	font-size: $size;
	top: $y-pos;
	right: $x-pos;
>>>>>>> 5539d2f61bba607193bb36cbf255176783dfb904
}

@mixin sccl-round-b-btn($theme) {
	background: map-get($theme, 'sccl-header-secondary') !important;
<<<<<<< HEAD
	width: 3em;
	height: 3em;
	border-radius: 50%;
	> i.material-icons {
		text-align: center;
		height: 1.5em;
		line-height: 1.5em;
		font-size: 2em;
		color: map-get($theme, 'sccl-button-white');
	}		
}

@mixin sccl-create-media-queries($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@media #{inspect(map-get($breakpoints, $breakpoint))} {
		  @content;
		}
	}
	  // If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
			+ "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}

@mixin set-breakpoint-properties($breakpoint-properties) {
	@each $screen-range, $classes in $breakpoint-properties {
		@include sccl-create-media-queries(#{$screen-range}) {
		  @each $class, $properties in $classes {
			#{$class} {
				@each $property, $value in $properties {
					#{$property}: $value;
				}
			};
		  }
		}
	}
}

=======
	width: 26px;
	height: 26px;
	> i.material-icons {
		height: 22px;
		line-height: 26px;
		font-size: 18px;
		color: map-get($theme, 'sccl-button-white');
	}		
}
>>>>>>> 5539d2f61bba607193bb36cbf255176783dfb904
